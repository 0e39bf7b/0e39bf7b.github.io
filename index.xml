<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Developer&#39;s blog</title>
    <link>https://0e39bf7b.github.io/</link>
    <description>Recent content on Developer&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 07 Jul 2019 12:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://0e39bf7b.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Code Reuse with React Hooks</title>
      <link>https://0e39bf7b.github.io/posts/code-reuse-with-hooks/</link>
      <pubDate>Sun, 07 Jul 2019 12:00:00 +0000</pubDate>
      
      <guid>https://0e39bf7b.github.io/posts/code-reuse-with-hooks/</guid>
      <description>&lt;p&gt;One of the most challenging problems for frontend developers is the reuse of code. It&amp;rsquo;s especially
important for big applications. Traditional approaches with higher-order components and render-props
have advantages and disadvantages. In some cases, it can be inconvenient to use them. React.JS 16.8
introduced a new feature called React Hooks. Let&amp;rsquo;s take a look at it and try to figure out how does
it work and how does it solve the problem of code reuse.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>JS vs JPG</title>
      <link>https://0e39bf7b.github.io/posts/js-vs-jpg/</link>
      <pubDate>Sat, 25 May 2019 10:00:00 +0000</pubDate>
      
      <guid>https://0e39bf7b.github.io/posts/js-vs-jpg/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://0e39bf7b.github.io/js-vs-jpg.png&#34; alt=&#34;Comparation between JS and JPG processing&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TL;DR: sometimes processing of JS file can be slower than the processing of JPG of the same size
in bytes, you&amp;rsquo;d better check your own project before optimizing it.&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Overengineering</title>
      <link>https://0e39bf7b.github.io/posts/overengineering/</link>
      <pubDate>Sat, 20 Apr 2019 11:05:05 +0000</pubDate>
      
      <guid>https://0e39bf7b.github.io/posts/overengineering/</guid>
      <description>&lt;p&gt;In the modern, world there are a lot of different libraries and tools which were created to simplify
software development, make it faster and less error-prone. Let&amp;rsquo;s talk about frontend development. 10
- 15 years ago the size of the JavaScript code on a regular Internet resource was much smaller.
The majority of resources used &lt;a href=&#34;https://jquery.com/&#34;&gt;jQuery&lt;/a&gt; with several plugins and a bit of
business logic. Nowadays web applications become much more complicated, contain a lot of business
logic and that is why being built using the Single Page Application (SPA) approach. When an
application is written like SPA it creates page content in the browser dynamically instead of
rendering HTML received from a server.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>