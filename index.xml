<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Developer&#39;s blog</title>
    <link>https://0e39bf7b.github.io/</link>
    <description>Recent content on Developer&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 22 Jan 2020 08:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://0e39bf7b.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Proxy and Magical Print</title>
      <link>https://0e39bf7b.github.io/posts/proxy-and-magical-print/</link>
      <pubDate>Wed, 22 Jan 2020 08:00:00 +0000</pubDate>
      
      <guid>https://0e39bf7b.github.io/posts/proxy-and-magical-print/</guid>
      <description>Once upon a time my colleague and I were working on end-to-end tests of one Angular.JS application. We used Node.js v8.9.1. Tests had such workflow:
 open a page; click an element; check if the page has some content.  As you can see it&amp;rsquo;s just a regular workflow for end-to-end tests, nothing special. Such tests allow us to reduce the amount of manual testing and eliminate bugs before the code will be delivered to the users.</description>
    </item>
    
    <item>
      <title>React Journey: componentWillMount in Concurrent Mode</title>
      <link>https://0e39bf7b.github.io/posts/react-journey-componentwillmount-in-concurrent-mode/</link>
      <pubDate>Tue, 17 Dec 2019 12:00:00 +0000</pubDate>
      
      <guid>https://0e39bf7b.github.io/posts/react-journey-componentwillmount-in-concurrent-mode/</guid>
      <description>&lt;p&gt;Several days ago I was updating one of my React projects and I found deprecation warning like:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Warning: componentWillMount has been renamed, and is not recommended for use. See
&lt;a href=&#34;https://fb.me/react-unsafe-component-lifecycles&#34;&gt;https://fb.me/react-unsafe-component-lifecycles&lt;/a&gt; for details.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Move code with side effects to componentDidMount, and set initial state in the constructor.&lt;/li&gt;
&lt;li&gt;Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict
mode. In React 17.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their
new names, you can run &lt;code&gt;npx react-codemod rename-unsafe-lifecycles&lt;/code&gt; in your project source folder.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;I had followed &lt;a href=&#34;https://fb.me/react-unsafe-component-lifecycles&#34;&gt;the link from this warning&lt;/a&gt; and
found such an explanation about why this method is deprecated:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;One of the biggest lessons weâ€™ve learned is that some of our legacy component lifecycles tend to
encourage unsafe coding practices. They are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;componentWillMount&lt;/li&gt;
&lt;li&gt;componentWillReceiveProps&lt;/li&gt;
&lt;li&gt;componentWillUpdate&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These lifecycle methods have often been misunderstood and subtly misused; furthermore, we
anticipate that their potential misuse may be more problematic with async rendering.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I think it&amp;rsquo;s important to understand why using &lt;code&gt;componentWillMount&lt;/code&gt; callback can be unsafe and why
you need to change your code somehow. First of all, let&amp;rsquo;s find out different usage examples of
&lt;code&gt;componentWillMount&lt;/code&gt; callback and check if it is safe or not to use this callback in different
situations in the stable version of React 16.12.0 for browser rendering (there are some issues
with server rendering but it&amp;rsquo;s a subject of a separate article).&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Configure Emacs for Python development</title>
      <link>https://0e39bf7b.github.io/posts/configure-emacs-for-python-development/</link>
      <pubDate>Sat, 19 Oct 2019 10:30:00 +0000</pubDate>
      
      <guid>https://0e39bf7b.github.io/posts/configure-emacs-for-python-development/</guid>
      <description>&lt;p&gt;I like to have the same development environment on the local machine and remote servers. In this
case it&amp;rsquo;s possible to write and debug programs not only with your laptop, but also using lightweight
tablet or netbook and at the same time have all stuff you have used to like fast CPU, enough memory
and all the features of IDE like code navigation or autocompletion. I prefer using Emacs on the
Ubuntu machine to achieve this goal.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://0e39bf7b.github.io/emacs-gui.png&#34; alt=&#34;Emacs GUI version&#34; /&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Code Reuse with React Hooks</title>
      <link>https://0e39bf7b.github.io/posts/code-reuse-with-react-hooks/</link>
      <pubDate>Sun, 07 Jul 2019 12:00:00 +0000</pubDate>
      
      <guid>https://0e39bf7b.github.io/posts/code-reuse-with-react-hooks/</guid>
      <description>&lt;p&gt;One of the most challenging problems for frontend developers is the reuse of code. It&amp;rsquo;s especially
important for big applications. Traditional approaches with higher-order components and render-props
have advantages and disadvantages. In some cases, it can be inconvenient to use them. React 16.8
introduced a new feature called React Hooks. Let&amp;rsquo;s take a look at it and try to figure out how does
it work and how does it solve the problem of code reuse.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>JS vs JPG</title>
      <link>https://0e39bf7b.github.io/posts/js-vs-jpg/</link>
      <pubDate>Sat, 25 May 2019 10:00:00 +0000</pubDate>
      
      <guid>https://0e39bf7b.github.io/posts/js-vs-jpg/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://0e39bf7b.github.io/js-vs-jpg.png&#34; alt=&#34;Comparation between JS and JPG processing&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;TL;DR: sometimes processing of JS file can be faster than the processing of JPG of the same size
in bytes, you&amp;rsquo;d better check your own project before optimizing it.&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Overengineering</title>
      <link>https://0e39bf7b.github.io/posts/overengineering/</link>
      <pubDate>Sat, 20 Apr 2019 11:05:05 +0000</pubDate>
      
      <guid>https://0e39bf7b.github.io/posts/overengineering/</guid>
      <description>&lt;p&gt;In the modern, world there are a lot of different libraries and tools which were created to simplify
software development, make it faster and less error-prone. Let&amp;rsquo;s talk about frontend development. 10
- 15 years ago the size of the JavaScript code on a regular Internet resource was much smaller.
The majority of resources used &lt;a href=&#34;https://jquery.com/&#34;&gt;jQuery&lt;/a&gt; with several plugins and a bit of
business logic. Nowadays web applications become much more complicated, contain a lot of business
logic and that is why being built using the Single Page Application (SPA) approach. When an
application is written like SPA it creates page content in the browser dynamically instead of
rendering HTML received from a server.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>